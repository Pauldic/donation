"""
Django settings for donate_v7 project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
from datetime import timedelta

import os
import re
from decimal import Decimal

from core.decouple import config, Csv
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys
from django.contrib import messages

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False
DEBUG = config('DEBUG', default=True, cast=bool)
LOGGING_LEVEL = config('LOGGING_LEVEL', default='INFO')
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())

PROJECT_NAME = config('PROJECT_NAME', default='donate_v12')
COY_NAME = config('COY_NAME', default='GMB')
PASS_CODE = '6677'

SITE_ID = 1
ADMINS = (('Administrator', 'support@gmbenefit.org'), ('Tester', 'donationmove@gmail.com'),)
MANAGERS = ADMINS
ROOT_URL = config('ROOT_URL')

# IP_LOOKUP_ADDRESS='http://ip-api.com/json'    # Cool but no HTTPS
# IP_LOOKUP_ADDRESS='https://ipapi.co/jsonp'    # Cross Origin Issue, can't call from the client end
IP_LOOKUP_ADDRESS='https://extreme-ip-lookup.com/json/'

CALL_APP_NAME = config('CALL_APP_NAME', default="VoiceVerification")
CALL_PRIVATE_KEY = config('CALL_PRIVATE_KEY', default="paymaster.key")
CALL_APP_ID = config('CALL_APP_ID', default="b4c5fa6c-76e3-48d3-a22f-11b538c902ee")
CALL_PASS = config('CALL_PASS', default="dc599954e6dbb517")
CALL_API_KEY = config('CALL_API_KEY', default="de0cea37")
CALL_BASE_URL = config('CALL_BASE_URL', default='https://api.nexmo.com')
CALL_VERSION = config('CALL_VERSION', default='/v1')

params = {
    'api_key': 'de0cea37',
    'api_secret': 'dc599954e6dbb517',
    'name': 'VoiceVerification',
    'type': 'voice',
    'answer_url': 'https://nexmo-community.github.io/ncco-examples/conference.json',
    'event_url': 'https://www.gmbenefit.org/call/status'
}

CSRF_TRUSTED_ORIGINS = []

# https://api.smartsmssolutions.com/smsapi.php?username=evernob&password=654321@Gap&sender=CoreDope&recipient=2348071503725&message=Your username: giftie, Password: nonye84
# SMS_USER = "coredope"
# SMS_PASS = "654321@Gap"
# SMS_API_KEY = "0BmS6talXhaFTvk3caQ2rb7XcXCFD3XXptqztR4XqKkZr2MIJFmqCqBfDwgZ7XDcmBnW1vsMSIZirwsrjhILUCfCBhN1wYRPgvzI"

# SMS_USER = "evernob"
# SMS_PASS = "654321@Gap"
# SMS_API_KEY = "bDvL7hGzZRJfUxAyZHV0gleX3PcT1nQtepjDOE1Cel2MHNOakPhNEETXg0NGnWSKLaslCrB2lAHyfxAcLzgfntVPVe4PYGNvTN3F"

SMS_USER = config('SMS_USER', default="")
SMS_PASS = config('SMS_PASS', default="")
SMS_API_KEY = config('SMS_API_KEY', default="")

# format "http://query.xourcecode.com/NameENQ?bank=058&account=0040572610"
BANK_ACC_VERIFICATION_URL = config('BANK_ACC_VERIFICATION_URL', default="")

# Generating a Receiving Address [GET]
# curl "https://api.blockchain.info/v2/receive?xpub=xpub6CWiJoiwxPQni3DFbrQNHWq8kwrL2J1HuBN7zm4xKPCZRmEshc7Dojz4zMah7E4o2GEEbD6HgfG7sQid186Fw9x9akMNKw2mu1PjqacTJB2&callback=https%3A%2F%2Fmystore.com%3Finvoice_id%3D058921123&key=[yourkeyhere]"
# Generating Address: Monitor addresses for received and spent payments
# https://api.blockchain.info/v2/receive?xpub=$xpub&callback=$callback_url&key=$key
# Block Notification [POST]
# curl -H "Content-Type: text/plain" --data '{"key":"[your-key-here]","height":500000,"callback":"https://mysite.com/block?request_id=1234","onNotification":"DELETE"}' https://api.blockchain.info/v2/receive/block_notification
# curl "https://api.blockchain.info/v2/receive/checkgap?xpub=[yourxpubhere]]&key=[yourkeyhere]"
BLOCKCHAIN_API_CODE = config('BLOCKCHAIN_API_CODE', default="")
BLOCKCHAIN_XPUB = config('BLOCKCHAIN_XPUB', default="")

# Balance Updates [POST]
# https://api.blockchain.info/v2/receive/balance_update
# address - The address you would like to monitor
# callback - The callback URL to be notified when a payment is received.
# key - Your blockchain.info receive payments v2 api key. Request an API key.
# onNotification - The request notification behaviour ('KEEP' | 'DELETE).
# confs - Optional (Default 3). The number of confirmations the transaction needs to have before a notification is sent.
# op - Optional (Default 'ALL'). The operation type you would like to receive notifications for ('SPEND' | 'RECEIVE' | 'ALL').
# curl -H "Content-Type: text/plain" --data '{"key":"[your-key-here]","addr":"183qrMGHzMstARRh2rVoRepAd919sGgMHb","callback":"https://mystore.com?invoice_id=123","onNotification":"KEEP", "op":"RECEIVE", "confs": 5}' https://api.blockchain.info/v2/receive/balance_update
# {"id" : 70, "addr" : "183qrMGHzMstARRh2rVoRepAd919sGgMHb", "op" : "RECEIVE", "confs" : 5, "callback" : "https://mystore.com?invoice_id=123", "onNotification" : "KEEP"}


# DEFAULT_SPONSOR = "08118468150"
DEFAULT_SPONSOR = '_system'
# AUTH_USER_MODEL = 'auth.User'
AUTH_USER_MODEL = 'core.User'

API_MAIL = {
    "sender": config('API_MAIL.sender', default=""),
    "key": config('API_MAIL.key', default=""),
    "secret": config('API_MAIL.secret', default="")
}



ADMIN_URL = 'access/'
LOGIN_URL = 'core:login'
LOGOUT_URL = 'core:logout'
LOGIN_REDIRECT_URL = 'core:dashboard'
LOGOUT_REDIRECT_URL = 'core:index'
PASSWORD_RESET_TIMEOUT_DAYS = 1
ID_SLUG_CODE = 1499999
MATHS_FACTOR = Decimal('1000000')
# EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=False, cast=bool)

STARTER_PACKAGE_NAME = 'Basic'
BITCOIN_CODE = 'BTC'
BITCOIN_ID = 1
EMAIL_TOKEN_LENGTH = '16'
SMS_TOKEN_LENGTH = 6

""" DO NOT ALTER THIS BLOCK AFTER RUNNING MIGRATION """
DONATION_ID_PREFIX = 'DO'
PH_ACCOUNT_ID_PREFIX = 'TP'
FS_ACCOUNT_ID_PREFIX = 'FS'
GH_ACCOUNT_ID_PREFIX = 'TG'
RC_ACCOUNT_ID_PREFIX = 'RC'
PF_ACCOUNT_ID_PREFIX = 'PF'
RF_ACCOUNT_ID_PREFIX = 'RF'
BS_ACCOUNT_ID_PREFIX = 'BS'
GP_ACCOUNT_ID_PREFIX = 'GP'
AD_ACCOUNT_ID_PREFIX = 'AD'
SP_ACCOUNT_ID_PREFIX = 'SP'
RB_ACCOUNT_ID_PREFIX = 'RB'
GB_ACCOUNT_ID_PREFIX = 'GB'
SB_ACCOUNT_ID_PREFIX = 'SB'
AA_ACCOUNT_ID_PREFIX = 'AA'
TRANSACTION_ID_PREFIX = 'QT'
TRANSACTION_DETAIL_ID_PREFIX = 'MT'
""" DO NOT ALTER THIS BLOCK AFTER RUNNING MIGRATION """

FACEBOOK_PAGE = config('FACEBOOK_PAGE', default="")


SOCIAL_AUTH_LOGIN_URL = 'core:login'
SOCIAL_AUTH_LOGIN_ERROR_URL = 'core:login'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = 'core:dashboard'
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = 'core:dashboard'
# SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = '/new-association-redirect-url/'
# SOCIAL_AUTH_DISCONNECT_REDIRECT_URL = '/account-disconnected-redirect-url/'
# SOCIAL_AUTH_INACTIVE_USER_URL = '/inactive-user/'

SOCIAL_AUTH_RAISE_EXCEPTIONS = True
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = False       # If you want to use the full email address as the username, define this setting.
SOCIAL_AUTH_SLUGIFY_USERNAMES = False           # For those that prefer slugged usernames, the get_username pipeline can apply a slug transformation
SOCIAL_AUTH_UID_LENGTH = 223
SOCIAL_AUTH_SESSION_EXPIRATION = False          # False means DO NOT Overide my SESSION_COOKIE_AGE value
SOCIAL_AUTH_REDIRECT_IS_HTTPS = False
SOCIAL_AUTH_URL_NAMESPACE = 'social'
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'last_name', 'email']
SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ['client_id']
# SOCIAL_AUTH_ASSOCIATE_BY_MAIL = True

# SOCIAL_AUTH_NONCE_SERVER_URL_LENGTH = 40
# SOCIAL_AUTH_ASSOCIATION_SERVER_URL_LENGTH = 40
# SOCIAL_AUTH_ASSOCIATION_HANDLE_LENGTH = 40

SOCIAL_AUTH_FACEBOOK_AUTH_EXTRA_ARGUMENTS = {'display': 'touch'}
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email',]
SOCIAL_AUTH_FACEBOOK_API_VERSION = '2.10'
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {'locale': 'en_EN', 'fields': 'id, name, email, photos'}

# https://localhost:8002/social/auth/complete/twitter/
# https://localhost:8002/social/auth/complete/google-oauth2
# https://localhost:8002/social/auth/complete/facebook

SOCIAL_AUTH_FACEBOOK_KEY = config('SOCIAL_AUTH_FACEBOOK_KEY', default='')
SOCIAL_AUTH_FACEBOOK_SECRET = config('SOCIAL_AUTH_FACEBOOK_SECRET', default='')
# SOCIAL_AUTH_FACEBOOK_APP_NAMESPACE = ''

SOCIAL_AUTH_TWITTER_KEY = config('SOCIAL_AUTH_TWITTER_KEY', default='')
SOCIAL_AUTH_TWITTER_SECRET = config('SOCIAL_AUTH_TWITTER_SECRET', default='')

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY', default='')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET', default='')

SOCIAL_AUTH_YAHOO_OAUTH2_KEY = config('SOCIAL_AUTH_YAHOO_OAUTH2_KEY', default='')
SOCIAL_AUTH_YAHOO_OAUTH2_SECRET = config('SOCIAL_AUTH_YAHOO_OAUTH2_SECRET', default='')

SOCIAL_AUTH_GITHUB_KEY = config('SOCIAL_AUTH_GITHUB_KEY', default='')
SOCIAL_AUTH_GITHUB_SECRET = config('SOCIAL_AUTH_GITHUB_SECRET', default='')

SOCIAL_AUTH_GITLAB_KEY = config('SOCIAL_AUTH_GITLAB_KEY', default='')
SOCIAL_AUTH_GITLAB_SECRET = config('SOCIAL_AUTH_GITLAB_SECRET', default='')

SOCIAL_AUTH_STACKOVERFLOW_KEY = config('SOCIAL_AUTH_STACKOVERFLOW_KEY', default='')
SOCIAL_AUTH_STACKOVERFLOW_SECRET = config('SOCIAL_AUTH_STACKOVERFLOW_SECRET', default='')
SOCIAL_AUTH_STACKOVERFLOW_API_KEY = config('SOCIAL_AUTH_STACKOVERFLOW_API_KEY', default='')

SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = config('SOCIAL_AUTH_AZUREAD_OAUTH2_KEY', default='')
SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = config('SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET', default='')
SOCIAL_AUTH_AZUREAD_OAUTH2_RESOURCE = 'https://graph.microsoft.com/'
# <a href="{% url 'social:begin' 'azuread-oauth2' %}?next={{ request.path }}">Login with Azure AD</a>
# https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-integrating-applications


SOCIAL_AUTH_GOOGLE_OAUTH2_IGNORE_DEFAULT_SCOPE = True
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile'
]


SOCIAL_AUTH_EMAIL_FORM_HTML = 'core:index'
# SOCIAL_AUTH_EMAIL_VALIDATION_URL = '/Email Verification Sent'
# SOCIAL_AUTH_USERNAME_FORM_HTML = 'username_signup.html'

SOCIAL_AUTH_EMAIL_VALIDATION_FUNCTION = 'core.overrides.social_auth.send_validation'
SOCIAL_AUTH_EMAIL_VALIDATION_URL = 'core:index'
# SOCIAL_AUTH_FORCE_EMAIL_VALIDATION = True

SOCIAL_AUTH_PIPELINE = [
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    # 'social_core.pipeline.user.get_username',
    'core.overrides.social_auth.get_username_lower',  # Ensure that is in lower case
    'core.overrides.social_auth.require_email',  # Ensure that email is part of the user details retrieved
    'core.overrides.social_auth.force_mail_validation',  # If this is the first time association, force email validation
    # 'social_core.pipeline.mail.mail_validation',
    'core.overrides.social_auth.mail_validation_member',    # Modified the original to also do Member Email verification
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    # 'social_core.pipeline.debug.debug',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'social_core.pipeline.debug.debug',
    'core.overrides.social_auth.get_profile_picture', # This is a path of your pipeline.py #and get_profile_picture is the function.

]


DEFAULT_DISCONNECT_PIPELINE = [
    # Verifies that the social association can be disconnected from the current user (ensure that the user login mechanism is not compromised by this disconnection).
    'social_core.pipeline.disconnect.allowed_to_disconnect',
    'social_core.pipeline.disconnect.get_entries',
    'social_core.pipeline.disconnect.revoke_tokens',
    'social_core.pipeline.disconnect.disconnect'
]

AUTHENTICATION_BACKENDS = [
    'social_core.backends.stackoverflow.StackoverflowOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.gitlab.GitLabOAuth2',
    'social_core.backends.google.GoogleOAuth',
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.google.GoogleOpenId',
    'social_core.backends.google.GooglePlusAuth',
    'social_core.backends.linkedin.LinkedinOAuth',
    'social_core.backends.linkedin.LinkedinOAuth2',
    'social_core.backends.twitter.TwitterOAuth',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.facebook.FacebookAppOAuth2',
    # 'social_core.backends.instagram.InstagramOAuth2',
    # 'social_core.backends.yahoo.YahooOAuth',
    # 'social_core.backends.yahoo.YahooOAuth2',
    # 'social_core.backends.yahoo.YahooOpenId',
    # 'social_core.backends.amazon.AmazonOAuth2',
    # 'social_core.backends.dropbox.DropboxOAuth',
    # 'social_core.backends.dropbox.DropboxOAuth2',

    # 'django.contrib.auth.backends.ModelBackend',
    'core.overrides.auth_backend.SDBackend'
]


PHONE_CONNECTIONS = ['12312377773', '17377772014']

EMAIL_CONNECTIONS = {
    'no-reply': {
        'host': 'smtp.zoho.com',
        'username': 'no-reply@gmbenefit.org',
        'password': config('EMAIL_CONNECTIONS.password', default=''),
        'port': 587,
        'use_tls': True,
    },
    'no-reply-1': {
        'host': 'smtp.zoho.com',
        'username': 'no-reply-1@gmbenefit.org',
        'password': config('EMAIL_CONNECTIONS.password', default=''),
        'port': 587,
        'use_tls': True,
    },
    'no-reply-2': {
        'host': 'smtp.zoho.com',
        'username': 'no-reply-2@gmbenefit.org',
        'password': config('EMAIL_CONNECTIONS.password', default=''),
        'port': 587,
        'use_tls': True,
    },
    'no-reply-3': {
        'host': 'smtp.zoho.com',
        'username': 'no-reply-3@gmbenefit.org',
        'password': config('EMAIL_CONNECTIONS.password', default=''),
        'port': 587,
        'use_tls': True,
    },
}

EMAIL_CONNECTION_DEFAULT = 'noreply@gmbenefit.org'

# https://www.zoho.com/mail/help/adminconsole/two-factor-authentication.html#alink5
SERVER_EMAIL = 'support@gmbenefit.org'

DEFAULT_FROM_EMAIL = 'noreply@gmbenefit.org'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.zoho.com'
EMAIL_HOST_USER = 'noreply@gmbenefit.org'
EMAIL_HOST_PASSWORD = config('EMAIL_CONNECTIONS.password', default='')
EMAIL_PORT = 587
EMAIL_USE_TLS = True


# Whether to send the SMTP Date header of email messages in the local time zone (True) or in UTC (False).
EMAIL_USE_LOCALTIME = True
EMAIL_TIMEOUT = 30

#   https://accounts.google.com/displayunlockcaptcha
#   https://www.google.com/settings/security/lesssecureapps

MAX_EMAIL_ATTACHMENT_SIZE = "10485760"

# Application definition

INSTALLED_APPS = [
    'django_celery_beat',
    'core',
    'django_adminlte',
    'django_adminlte_theme',
    # 'django_admin_bootstrapped',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',
    'bootstrapform',
    'markdown_deux',
    # 'support',
    # 'django_celery_results',
    # 'session_security',
    'social_django',
    'rest_framework',
    'captcha',
    'postman',

    'notifications',
]

if DEBUG:
    INSTALLED_APPS.append("sslserver")

MESSAGE_TAGS = {
    messages.INFO: 'alert alert-info info',
    messages.SUCCESS: 'alert alert-success success',
    messages.WARNING: 'alert alert-warning warning',
    messages.ERROR: 'alert alert-danger error',
}

NOTIFICATIONS_USE_JSONFIELD = True
NOTIFICATIONS_SOFT_DELETE = True

MIDDLEWARE = [
    # 'django.middleware.cache.UpdateCacheMiddleware',  # Cache: This must be first on the list
    'django.middleware.common.BrokenLinkEmailsMiddleware',  # To ensure log emails are sent
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.middleware.locale.LocaleMiddleware',  # For I18N & L10N
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',   #Added cos of Social-Auth
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',       # Cache: This must be last

    'social_django.middleware.SocialAuthExceptionMiddleware',   # Added cos of Social-Auth
]

ROOT_URLCONF = PROJECT_NAME +'.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "django.template.context_processors.static",
                'django.template.context_processors.request',

                'social_django.context_processors.backends',        #Added cos of Social-Auth
                'social_django.context_processors.login_redirect',  #Added cos of Social-Auth

                'postman.context_processors.inbox'
            ], 'libraries': {
                'mathfilters': 'core.templatetags.mathfilters',
                'set_var': 'core.templatetags.set_var',
                'jsonify': 'core.templatetags.normalise_decimal',
                'admin_tags': 'core.templatetags.admin_tags',
                'upload_tags': 'core.templatetags.upload_tag',
                # 'acc_method': 'core.templatetags.get_model_var',
                # 'load_support_settings': 'support.templatetags.load_support_settings'
            }
        },

    },
]

WSGI_APPLICATION = PROJECT_NAME +'.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT', default=3306),
        'OPTIONS': {
            'charset': 'utf8mb4',
            # 'default-character-set': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'init_command': "SET default_storage_engine='INNODB'",
        }
    },
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', 'OPTIONS': {'min_length': 8, }},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]

DATETIME_FORMAT = 'o-m-d H:i'


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_L10N = False

USE_TZ = True

APPEND_SLASH = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
# MEDIA_ROOT = '/media/'
MEDIA_URL = '/media/'
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "media/"), os.path.join(BASE_DIR, PROJECT_NAME+"/default/"), os.path.join(BASE_DIR, PROJECT_NAME+"/assets/")]

# CELERY_RESULT_BACKEND = 'django-db'
# CELERY_RESULT_BACKEND = 'django-cache'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379'

CELERY_BROKER_TRANSPORT = 'redis'
CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
# CELERY_BROKER_URL = 'redis+socket:///var/run/redis/redis.sock'
# CELERY_BROKER_URL = 'redis://:password@host:port/db'
# CELERY_BROKER_URL = 'amqp://guest:guest@localhost//'

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ['json']
# CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Lagos'

# CELERY_CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
# CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# CELERY_SEND_TASK_ERROR_EMAILS = True

# result_backend = 'django-db'
# broker_url = 'redis://localhost:6379'
# accept_content = ['json']
# task_serializer = 'json'


# # Django provides a clean-up management command for this purpose: clearsessions. It's recommended to call this command on a regular basis, for example as a daily cron job.
# SESSION_COOKIE_AGE = 60 * 20    # 10mins
# SESSION_EXPIRE_AT_BROWSER_CLOSE = False
# SESSION_COOKIE_DOMAIN = '.gmbenefit.org'  # For security concern visit: https://docs.djangoproject.com/en/1.11/topics/http/sessions/#technical-details
SESSION_COOKIE_SECURE = CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True


DJANGO_REDIS_IGNORE_EXCEPTIONS = True
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True
# DJANGO_REDIS_LOGGER = 'redis.logger'

# You can set up Redis to store your application's cache data. Use the django-redis module for this. pip install django-redis
# For better performance, you may want to use a cache-based session backend.
CACHE_MIDDLEWARE_KEY_PREFIX = ''  # A string which will be prefixed to the cache keys generated by the cache middleware. This prefix is combined with the KEY_PREFIX setting; it does not replace it.
CACHE_MIDDLEWARE_SECONDS = 10  # The default number of seconds to cache a page for the cache middleware.
# If a view sets its own cache expiry time (i.e. it has a max-age section in its Cache-Control header) then the page will be cached until the expiry time, rather than CACHE_MIDDLEWARE_SECONDS.
# Using the decorators in django.views.decorators.cache you can easily set a view's expiry time (using the cache_control() decorator) or disable caching for a view (using the never_cache() decorator).
# See the using other headers section for more on these decorators.

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        # "KEY_PREFIX": 'gmb',  # A string that will be automatically included (prepended by default) to all cache keys used by the Django server.
        "TIMEOUT": 60 * .4,  # The default timeout, in seconds, to use for the cache. This argument defaults to 300 seconds (5 minutes).
        # 'LOCATION': ['172.19.26.240:11211', '172.19.26.242:11211',],  # Master Slave
        # "LOCATION": '/var/run/redis/redis.sock',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "mysecret"
            "SOCKET_CONNECT_TIMEOUT": 5,  # is the timeout for the connection to be established and SOCKET_TIMEOUT is the timeout for read and write operations after the connection is established.
            "SOCKET_TIMEOUT": 5,  # in seconds
            "IGNORE_EXCEPTIONS": True,  # you do not want exceptions when Redis is down
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            # "PARSER_CLASS": "redis.connection.HiredisParser",   # redis-py (the Python Redis client used by django-redis) comes with a pure Python Redis parser that works very well for most common task, but if you want some performance boost, you can use hiredis. hiredis is a Redis client written in C and it has its own parser that can be used with django-redis
        }
    }
}
# You can also use Redis to store your application's cache data and write session information to the database and only load it from the cache by using:
# SESSION_ENGINE = "django.contrib.sessions.backends.cache" # for a simple caching session store. Session data will be stored directly in your cache
# SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_ENGINE = 'core.overrides.cached_db'
SESSION_CACHE_ALIAS = "default"
USER_AGENTS_CACHE = 'default'

# def tearDown(self):
#     from django_redis import get_redis_connection
#     get_redis_connection("default").flushall()
# def connection_count
#     r = get_redis_connection("default")  # Use the name you have defined for Redis in settings.CACHES
#     connection_pool = r.connection_pool
#     print("Created connections so far: %d" % connection_pool._created_connections)
# from importlib import import_module
# from django.conf import settings
# SessionStore = import_module(settings.SESSION_ENGINE).SessionStore

# Redis for Django session data without django-redis-cache
# https://github.com/martinrusev/django-redis-sessions  pip install django-redis-sessions
# SESSION_ENGINE = 'redis_sessions.session'
# SESSION_REDIS_UNIX_DOMAIN_SOCKET_PATH = '/var/run/redis/redis.sock'

# SESSION_REDIS_HOST = 'localhost'
# SESSION_REDIS_PORT = 6379
# SESSION_REDIS_DB = 0
# SESSION_REDIS_PASSWORD = 'password'
# SESSION_REDIS_PREFIX = 'session'
# SESSION_REDIS_SOCKET_TIMEOUT = 1


POSTMAN_I18N_URLS = True
POSTMAN_DISALLOW_ANONYMOUS = False
POSTMAN_DISALLOW_MULTIRECIPIENTS = False
POSTMAN_DISALLOW_COPIES_ON_REPLY = True
POSTMAN_DISABLE_USER_EMAILING = True
# POSTMAN_FROM_EMAIL
POSTMAN_AUTO_MODERATE_AS = True # True to accept messages, False to reject messages or None to leave messages to a moderator review.
# POSTMAN_SHOW_USER_AS = 'last_name'
# POSTMAN_NAME_USER_AS = 'last_name'
POSTMAN_QUICKREPLY_QUOTE_BODY = False
# POSTMAN_NOTIFIER_APP = 'notifications'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.

# Consider using something such as Sentry to get the best of both worlds - the rich information of full tracebacks plus the security of not sending the information over email https://sentry.io/auth/login/

# "django.request": Log messages related to the handling of requests. 5XX responses are raised as ERROR messages; 4XX responses are raised as WARNING messages.
# "django.db.backends": For performance reasons, SQL logging is only enabled when settings.DEBUG is set to True, regardless of the logging level or handlers that are installed.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },

    'formatters': {
        'verbose': {
            # ERROR|25/Apr/2017 17:30:22|basehttp|25069|139803081283328|"POST /system/secured/admin/core/package/add/ HTTP/1.1" 500 59
            'format': '%(levelname)s|%(asctime)s|%(module)s|%(process)d|%(thread)d|%(message)s',
            'datefmt': "%Y-%d-%b %H:%M:%S"
        },
        'standard': {
            # [ERROR]25-Apr-2017 17:52:24|django.server|"POST /system/secured/admin/core/package/add/ HTTP/1.1" 500 59
            'format': '[%(levelname)s]%(asctime)s|%(name)s|%(message)s',
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {'format': '%(levelname)s|%(asctime)s|%(message)s', 'datefmt': "%Y-%m-%d %H:%M:%S"},
        'too-simple': {'format': '%(message)s'},
    },

    'handlers': {
        'null': {
            'level': LOGGING_LEVEL,
            'class': 'logging.NullHandler',
        },
        'mail_admins': {
            'level': LOGGING_LEVEL,
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'email_backend': 'django.core.mail.backends.smtp.EmailBackend',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'too-simple',
            'stream': sys.stdout,
        },
        'log_file': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, PROJECT_NAME + '.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5MB
            'backupCount': 5,
            'formatter': 'standard',
        },
    },

    'loggers': {
        PROJECT_NAME + '.tasks': {
            'handlers': ['mail_admins'],
            'propagate': True,
        },
        # PROJECT_NAME: {
        #     'handlers': ['mail_admins', 'console', 'log_file'],
        #     'propagate': True,
        # },
        # 'core.*.*': {
        #     'handlers': ['console'],
        #     'propagate': True,
        # },
        # 'core.overrides': {
        #     'handlers': ['console'],
        #     'propagate': True,
        # },
        # 'core.*': {
        #     'handlers': ['mail_admins', 'console', 'log_file'],
        #     'propagate': True,
        # },
        PROJECT_NAME+'.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['log_file'],
            'propagate': True,
        },
        'django.security.*': {
            'handlers': ['mail_admins', 'log_file'],
            'propagate': True,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
        'django_redis.cache': {
            'handlers': ['log_file', 'console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins', 'log_file'],
            'propagate': True,
        },
        'django': {
            'handlers': ['log_file', 'console'],
            'propagate': True,
        },
        'root': {
            'handlers': ['console'],
        }
    },
}

USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = ','

# SECURE_BROWSER_XSS_FILTER = False
# SECURE_CONTENT_TYPE_NOSNIFF = True

# You can tell Django to stop reporting particular 404s by tweaking the IGNORABLE_404_URLS setting.
IGNORABLE_404_URLS = [
    re.compile(r'\.(php|cgi)$'),
    re.compile(r'^/phpmyadmin/'),
    re.compile(r'^/apple-touch-icon.*\.png$'),
    re.compile(r'^/favicon\.ico$'),
    re.compile(r'^/robots\.txt$'),
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

try:
    from example.local_settings import *
except ImportError:
    pass
